{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["quotesURL","colorsArray","App","quote","setQuote","useState","author","setAuthor","randomNumber","setRandomNumber","quotesArray","setQuotesArray","mainColor","setMainColor","useEffect","async","response","fetch","url","parsedJSON","json","quotes","console","log","fetchQuotes","React","createElement","className","style","backgroundColor","id","color","href","encodeURI","concat","FontAwesomeIcon","icon","faXTwitter","onClick","getRandomQuote","randomInteger","Math","floor","length","random","randomIntegerColors","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yPAOA,IAAIA,EAAY,yIAEZC,EAAc,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAmDaC,MAhDf,WACE,MAAOC,EAAOC,GAAYC,mBAAS,uEAC5BC,EAAQC,GAAaF,mBAAS,sBAC9BG,EAAcC,GAAmBJ,mBAAS,IAC1CK,EAAaC,GAAkBN,mBAAS,OACxCO,EAAWC,GAAgBR,mBAAS,WAsB3C,OAJAS,oBAAU,KAPUC,WAClB,MAAMC,QAAiBC,MAAMC,GACvBC,QAAmBH,EAASI,OAClCT,EAAeQ,EAAWE,QAC1BC,QAAQC,IAAIJ,IAIZK,CAAYxB,IACV,CAACA,IAGHyB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,aAAaC,MAAO,CAACC,gBAAiBjB,IACtDa,IAAAC,cAAA,OAAKI,GAAG,aACNL,IAAAC,cAAA,KAAGI,GAAG,OAAOF,MAAO,CAACG,MAAOnB,IAAY,IACpCT,EAAM,KAEVsB,IAAAC,cAAA,KAAGI,GAAG,SAASF,MAAO,CAACG,MAAOnB,IAAY,KACrCN,GAELmB,IAAAC,cAAA,WACED,IAAAC,cAAA,KAAGI,GAAG,cAAcF,MAAO,CAACC,gBAAiBjB,GAAYoB,KAAMC,UAAU,4CAADC,OAA6C/B,EAAK,MAAA+B,OAAK5B,KAAWmB,IAAAC,cAACS,IAAe,CAACC,KAAMC,OACjKZ,IAAAC,cAAA,UAAQI,GAAG,YAAYF,MAAO,CAACC,gBAAiBjB,GAAY0B,QAASA,IAhCxDC,MACrB,IAAIC,EAAgBC,KAAKC,MAAMhC,EAAYiC,OAASF,KAAKG,UACrDC,EAAsBJ,KAAKC,MAAMzC,EAAY0C,OAASF,KAAKG,UAC/DnC,EAAgB+B,GAChBpC,EAASM,EAAY8B,GAAerC,OACpCI,EAAUG,EAAY8B,GAAelC,QACrCO,EAAaZ,EAAY4C,KA0B0DN,IAAkB,eAGjGd,IAAAC,cAAA,WAAKD,IAAAC,cAAA,KAAGI,GAAG,QAAQE,KAAMC,UAAU,kDAAkD,0BCtD9Ea,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnC,IAAAC,cAACD,IAAMoC,WAAU,KACfpC,IAAAC,cAACxB,EAAG,QAOR4C,K","file":"static/js/main.3a5e49f0.chunk.js","sourcesContent":["import { cleanup } from '@testing-library/react';\nimport './App.css';\nimport React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faXTwitter} from '@fortawesome/free-brands-svg-icons';\n\nlet quotesURL = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\nlet colorsArray = [\n  '#16a085',\n  '#27ae60',\n  '#2c3e50',\n  '#f39c12',\n  '#e74c3c',\n  '#9b59b6',\n  '#FB6964',\n  '#342224',\n  '#472E32',\n  '#BDBB99',\n  '#77B1A9',\n  '#73A857'\n];\n\nfunction App() {\n  const [quote, setQuote] = useState(\"I didnâ€™t fail the test. I just found 100 ways to do it wrong.\")\n  const [author, setAuthor] = useState(\"Benjamin Franklin\")\n  const [randomNumber, setRandomNumber] = useState(0)\n  const [quotesArray, setQuotesArray] = useState(null)\n  const [mainColor, setMainColor] = useState('#16a085')\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random())\n    let randomIntegerColors = Math.floor(colorsArray.length * Math.random())\n    setRandomNumber(randomInteger)\n    setQuote(quotesArray[randomInteger].quote)\n    setAuthor(quotesArray[randomInteger].author)\n    setMainColor(colorsArray[randomIntegerColors])\n  }\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url)\n    const parsedJSON = await response.json()\n    setQuotesArray(parsedJSON.quotes)\n    console.log(parsedJSON)\n  }\n  \n  useEffect(() => {     // detects if any changes were made to the url and update it locally\n    fetchQuotes(quotesURL)\n   }, [quotesURL])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor: mainColor}}>\n        <div id='quote-box'>\n          <p id='text' style={{color: mainColor}}>\n            \"{quote}\"\n          </p>\n          <p id='author' style={{color: mainColor}}>\n            - {author}\n          </p>\n          <div>\n            <a id='tweet-quote' style={{backgroundColor: mainColor}} href={encodeURI(`http://www.twitter.com/intent/tweet?text=${quote} -${author}`)}><FontAwesomeIcon icon={faXTwitter}/></a>\n            <button id=\"new-quote\" style={{backgroundColor: mainColor}} onClick={() => getRandomQuote()}>New Quote</button>\n          </div>\n        </div>\n        <div><a id='owner' href={encodeURI(`https://www.linkedin.com/in/rafaelcarvalho11/`)}>by Rafael Carvalho</a></div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}